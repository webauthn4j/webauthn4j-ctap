/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {

    //kotlin
    ext.kotlinVersion = '1.7.10'
    ext.kotlinCoroutinesVersion = '1.6.4'
    ext.coreKtxVersion = "1.8.0"

    ext.daggerVersion = "2.42"
    ext.roomVersion = "2.4.2"

    // Android libraries
    ext.asmVersion = "9.3"
    ext.appcompatVersion = "1.4.2"
    ext.constraintlayoutVersion = "2.1.4"
    ext.biometricVersion = "1.1.0"
    ext.legacySupportV4Version = "1.0.0"
    ext.preferenceVersion = "1.2.0"
    ext.lifecycleExtensions = "2.2.0"
    ext.navigationVersion = "2.4.2"
    ext.lifecycleKtxVersion = "2.5.0"
    ext.materialVersion = "1.6.1"
    ext.googleServicesVersion = "4.3.13"
    ext.firebaseBomVersion = "30.4.0"
    ext.firebaseCrashlyticsGradleVersion = "2.9.1"
    ext.googlePlayServicesAuthVersion = "20.2.0"
    ext.googlePlayServicesFidoVersion = "18.1.0"
    ext.googlePlayServicesSafetyNetVersion = "18.0.1"
    ext.googlePlayServicesOSSLicensesVersion = "17.0.0"
    ext.androidGradlePluginVersion = "7.0.4"
    ext.navigationSafeArgsGradlePluginVersion = "2.5.0"
    ext.ossLicensesPluginVersion = "0.10.4"

    // WebAuthn4J
    ext.webauthn4jVersion = "unifidokey-dev-SNAPSHOT"

    // Third party libraries
    ext.slf4jVersion = "1.7.36"
    ext.logbackAndroidVersion = "2.0.0"
    ext.bouncyCastleVersion = "1.70"
    ext.jacksonVersion = "2.13.3"

    // Test libraries
    ext.springBootVersion = "2.7.3"
    ext.truthVersion = "1.1.3"
    ext.mockitoKotlinVersion = "4.0.0"
    ext.androidxTestVersion = "1.4.0"
    ext.androidxTestExtJUnitVersion = "1.1.3"
    ext.espressoVersion = "3.4.0"
    ext.androidSupportVersion = "28.0.0"
    ext.robolectricVersion = "4.8.2"

    // Tools
    ext.asciidoctorGradleVersion = "3.3.2"
    ext.sonarqubeVersion = "3.4.0.2513"

    repositories {
        google()
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"
        classpath "com.android.tools.build:gradle:$androidGradlePluginVersion"
        classpath "com.google.android.gms:oss-licenses-plugin:$ossLicensesPluginVersion"
        classpath "com.google.firebase:firebase-crashlytics-gradle:$firebaseCrashlyticsGradleVersion"
        classpath "com.google.gms:google-services:$googleServicesVersion"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$navigationSafeArgsGradlePluginVersion"

        classpath "org.asciidoctor:asciidoctor-gradle-jvm:$asciidoctorGradleVersion"
        classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:$sonarqubeVersion"

        // workaround from https://issuetracker.google.com/issues/159151549
        classpath "org.ow2.asm:asm:$asmVersion"
        classpath "org.ow2.asm:asm-util:$asmVersion"
        classpath "org.ow2.asm:asm-commons:$asmVersion"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

apply plugin: 'org.asciidoctor.jvm.convert'
apply plugin: 'org.sonarqube'

allprojects {
    configurations.all {
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

repositories {
    google()
    mavenCentral()
}

// To use dependencies block in this parent file, apply plugins in this file first
project(':webauthn4j-ctap-core') {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'jacoco'
}
project(':webauthn4j-ctap-authenticator') {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'jacoco'
}
project(':webauthn4j-ctap-client') {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'jacoco'
}
project(':unifidokey-core') {
    apply plugin: 'com.android.library'
}
project(':unifidokey-handheld') {
    apply plugin: 'com.android.application'
}

subprojects {

    repositories {
        google()
        mavenCentral()
        maven { url "https://oss.jfrog.org/artifactory/libs-snapshot" }
        maven { url 'https://jitpack.io' }
    }

    dependencies {
        //BOM
        implementation platform("org.jetbrains.kotlin:kotlin-bom:${kotlinVersion}")
        implementation platform("com.google.firebase:firebase-bom:${firebaseBomVersion}")
        testImplementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")

        constraints {
            // kotlin

            implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlinVersion")
            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion")
            implementation("org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:$kotlinCoroutinesVersion")
            implementation("androidx.core:core-ktx:$coreKtxVersion")
            implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleKtxVersion")
            implementation("androidx.lifecycle:lifecycle-runtime-ktx:$lifecycleKtxVersion")
            implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleKtxVersion")

            // google
            implementation("androidx.navigation:navigation-fragment:$navigationVersion")
            implementation("androidx.navigation:navigation-ui:$navigationVersion")

            implementation("androidx.room:room-runtime:$roomVersion")
            implementation("androidx.appcompat:appcompat:$appcompatVersion")
            implementation("androidx.constraintlayout:constraintlayout:$constraintlayoutVersion")

            implementation("androidx.biometric:biometric:$biometricVersion")
            implementation("androidx.legacy:legacy-support-v4:$legacySupportV4Version")
            implementation("androidx.preference:preference:$preferenceVersion")
            implementation("androidx.lifecycle:lifecycle-livedata:$lifecycleExtensions")
            implementation("androidx.lifecycle:lifecycle-extensions:$lifecycleExtensions")
            implementation("androidx.lifecycle:lifecycle-livedata-ktx:$lifecycleExtensions")
            implementation("androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycleExtensions")


            implementation("com.google.dagger:dagger:$daggerVersion")
            implementation("com.google.dagger:dagger-android:$daggerVersion")
            implementation("com.google.dagger:dagger-android-support:$daggerVersion")

            implementation("com.google.android.material:material:$materialVersion")

            implementation("com.google.android.gms:play-services-auth:$googlePlayServicesAuthVersion")
            implementation("com.google.android.gms:play-services-fido:$googlePlayServicesFidoVersion")
            implementation("com.google.android.gms:play-services-safetynet:$googlePlayServicesSafetyNetVersion")
            implementation("com.google.android.gms:play-services-oss-licenses:$googlePlayServicesOSSLicensesVersion")

            // third party
            implementation("org.slf4j:slf4j-api:$slf4jVersion")
            implementation("com.github.tony19:logback-android:$logbackAndroidVersion")
            implementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion")
            implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
            implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion")
            implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
            implementation("org.bouncycastle:bcutil-jdk15to18:$bouncyCastleVersion")
            implementation("org.bouncycastle:bcprov-jdk15to18:$bouncyCastleVersion")
            implementation("org.bouncycastle:bcpkix-jdk15to18:$bouncyCastleVersion")
            implementation("com.github.webauthn4j.webauthn4j:webauthn4j-util:$webauthn4jVersion")
            implementation("com.github.webauthn4j.webauthn4j:webauthn4j-core:$webauthn4jVersion")
            implementation("com.github.webauthn4j.webauthn4j:webauthn4j-test:$webauthn4jVersion")

            // test
            testImplementation("com.fasterxml.jackson.core:jackson-databind:$jacksonVersion!!") //override BOM version
            testImplementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion!!") //override BOM version
            testImplementation("com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jacksonVersion!!") //override BOM version
            testImplementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion!!") //override BOM version

            testImplementation("org.jetbrains.kotlinx:kotlinx-coroutines-test")
            testImplementation("com.google.truth:truth:$truthVersion")
            testImplementation("com.google.truth.extensions:truth-java8-extension:$truthVersion")
            testImplementation("androidx.test:core:$androidxTestVersion")
            testImplementation("androidx.test.ext:junit:$androidxTestExtJUnitVersion")
            testImplementation("androidx.test:runner:$androidxTestVersion")
            testImplementation("androidx.test.espresso:espresso-core:$espressoVersion")
            testImplementation("com.android.support:support-annotations:$androidSupportVersion")
            testImplementation("org.robolectric:robolectric:$robolectricVersion")
            testImplementation("org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion")

        }

    }
}

//task clean(type: Delete) {
//    delete rootProject.buildDir
//}

import org.asciidoctor.gradle.jvm.AsciidoctorTask

task generateUserGuide(type: AsciidoctorTask) {
    group = "documentation"
    baseDirFollowsSourceDir()
    sourceDir = file("docs/user-guide")
    outputDir = file("build/docs/asciidoc/html5")
    options eruby: 'erubis'
    //noinspection GroovyAssignabilityCheck
    attributes docinfo: '',
            copycss: '',
            icons: 'font',
            'source-highlighter': 'prettify',
            sectanchors: '',
            toc2: '',
            idprefix: '',
            idseparator: '-',
            doctype: 'book',
            numbered: '',
            revnumber: "${unifidoKeyVersion}"
}

task generateReleaseNote(type: JavaExec) {
    group = "documentation"
    classpath = files('gradle/lib/github-release-notes-generator.jar')

    args(unifidoKeyVersion, file("build/release-note.md").absolutePath, "--spring.config.location=file:" + file("github-release-notes-generator.yml").absolutePath)

}

sonarqube {
    properties {
        property 'sonar.projectKey', 'webauthn4j-ctap'
        property 'sonar.issue.ignore.multicriteria', 'e1,e2,e3'
        property 'sonar.issue.ignore.multicriteria.e1.ruleKey', 'java:S110'
        property 'sonar.issue.ignore.multicriteria.e1.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e2.ruleKey', 'java:S1452'
        property 'sonar.issue.ignore.multicriteria.e2.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e3.ruleKey', 'common-java:DuplicatedBlocks'
        property 'sonar.issue.ignore.multicriteria.e3.resourceKey', '**/*.java'
    }
}

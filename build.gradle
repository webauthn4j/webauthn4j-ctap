buildscript {

    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath libs.kotlin.gradle.plugin

        classpath libs.asciidoctor.gradle.jvm
        classpath libs.sonarqube.gradle.plugin


        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

plugins {
    id 'org.asciidoctor.jvm.convert' version '4.0.2'
    id 'org.sonarqube' version '5.0.0.4638'
    id 'com.google.devtools.ksp' version '2.0.0-1.0.22' apply false
}

allprojects {
    group 'com.webauthn4j'
    version webAuthn4JCTAPVersion

    configurations.configureEach {
        resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
    }
}

repositories {
    mavenCentral()
}

subprojects {
    apply plugin: 'org.jetbrains.kotlin.jvm'
    apply plugin: 'jacoco'
    apply plugin: 'signing'
    apply plugin: "maven-publish"


    repositories {
        google()
        mavenCentral()
        maven { url "https://oss.jfrog.org/artifactory/libs-snapshot" }
        maven { url 'https://jitpack.io' }
    }

    artifacts {
        archives kotlinSourcesJar
    }

    tasks.register('javadocJar', Jar) {
        dependsOn javadoc
        archiveClassifier = 'javadoc'
        from javadoc.destinationDir
    }

    apply from: "../util.gradle"

    def githubUrl = "https://github.com/webauthn4j/webauthn4j-ctap"
    def mavenCentralUser = getVariable('MAVEN_CENTRAL_USER', 'mavenCentralUser')
    def mavenCentralPassword = getVariable('MAVEN_CENTRAL_PASSWORD', 'mavenCentralPassword')
    def pgpSigningKey = getVariable('PGP_SIGNING_KEY', 'pgpSigningKey')
    def pgpSigningKeyPassphrase = getVariable('PGP_SIGNING_KEY_PASSPHRASE', 'pgpSigningKeyPassphrase')

    publishing {
        publications {
            standard(MavenPublication) {
                from components.java
                artifact kotlinSourcesJar
                artifact javadocJar

                // "Resolved versions" strategy is used to define dependency version because WebAuthn4J use dependencyManagement (BOM) feature
                // to define its dependency versions. Without "Resolved versions" strategy, version will not be exposed
                // to dependencies.dependency.version in POM file, and it cause warning in the library consumer environment.
                versionMapping {
                    usage('java-api') {
                        fromResolutionOf('runtimeClasspath')
                    }
                    usage('java-runtime') {
                        fromResolutionResult()
                    }
                }

                pom {
                    name = project.name
//                    description = project.description //TODO: this doesn't work. to be fixed. https://github.com/gradle/gradle/issues/12259
                    url = githubUrl
                    licenses {
                        license {
                            name = 'The Apache Software License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                            distribution = 'repo'
                        }
                    }
                    developers {
                        developer {
                            id = 'ynojima'
                            name = 'Yoshikazu Nojima'
                            email = 'mail@ynojima.net'
                        }
                    }
                    scm {
                        url = githubUrl
                    }
                    resolveStrategy = Closure.DELEGATE_FIRST
                }
                pom.withXml { pom ->
                    def root = pom.asNode()
                    root.appendNode("description", project.description) // workaround for https://github.com/gradle/gradle/issues/12259
                }
            }
        }
        repositories {
            maven {
                name = "mavenCentral"
                url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
                credentials {
                    username = "${mavenCentralUser}"
                    password = "${mavenCentralPassword}"
                }
            }
            maven {
                name = "snapshot"
                url = "https://oss.sonatype.org/content/repositories/snapshots"
                credentials {
                    username = "${mavenCentralUser}"
                    password = "${mavenCentralPassword}"
                }
            }
        }
    }

    signing {
        useInMemoryPgpKeys(pgpSigningKey, pgpSigningKeyPassphrase)
        sign publishing.publications.standard
    }

    tasks.withType(Sign).configureEach {
        onlyIf { pgpSigningKey != null && pgpSigningKeyPassphrase != null }
    }

    publishStandardPublicationToSnapshotRepository.onlyIf { webAuthn4JCTAPVersion.endsWith("-SNAPSHOT") }
    publishStandardPublicationToMavenCentralRepository.onlyIf { !webAuthn4JCTAPVersion.endsWith("-SNAPSHOT") }


}

tasks.register('updateVersionsInDocuments') {
    group = "documentation"
    String regex = "<webauthn4jctap\\.version>.*</webauthn4jctap\\.version>"
    String replacement = "<webauthn4jctap\\.version>" + lastReleasedWebAuthn4JCTAPVersion + "</webauthn4jctap.version>"

    def files = [file('README.md')]
    files.each { file ->
        String updated = file.getText('UTF-8').replaceFirst(regex, replacement)
        file.setText(updated, 'UTF-8')
    }
}

tasks.register('generateReleaseNote', JavaExec) {
    group = "documentation"
    classpath = files('gradle/lib/github-release-notes-generator.jar')

    args(webAuthn4JCTAPVersion, file("build/release-note.md").absolutePath, "--spring.config.location=file:" + file("github-release-notes-generator.yml").absolutePath)

}

sonarqube {
    properties {
        property 'sonar.projectKey', 'webauthn4j-ctap'
        property 'sonar.issue.ignore.multicriteria', 'e1,e2,e3'
        property 'sonar.issue.ignore.multicriteria.e1.ruleKey', 'java:S110'
        property 'sonar.issue.ignore.multicriteria.e1.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e2.ruleKey', 'java:S1452'
        property 'sonar.issue.ignore.multicriteria.e2.resourceKey', '**/*.java'
        property 'sonar.issue.ignore.multicriteria.e3.ruleKey', 'common-java:DuplicatedBlocks'
        property 'sonar.issue.ignore.multicriteria.e3.resourceKey', '**/*.java'
    }
}

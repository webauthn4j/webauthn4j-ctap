import com.unifidokey.gradle.util.PublishAppBundleTask
import com.unifidokey.gradle.util.VersionCodeUtil
import com.unifidokey.gradle.util.PropertyUtil

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'androidx.navigation.safeargs'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'com.google.firebase.crashlytics'

def unifidoKeyVersionCode = VersionCodeUtil.getVersionCodeFromVersionString(unifidoKeyVersion)

android {
    compileSdkVersion 30 // Android 11.0
    buildToolsVersion '30.0.2'

    defaultConfig {
        minSdkVersion 28 // Android 9.0
        targetSdkVersion 30 // Android 11.0
        versionName "$unifidoKeyVersion"
        versionCode unifidoKeyVersionCode
        testInstrumentationRunner 'androidx.test.runner.AndroidJUnitRunner'
        consumerProguardFiles 'consumer-rules.pro'
    }
    signingConfigs {
        playstore {
            PropertyUtil.load(rootProject, "secret.properties")
            storeFile rootProject.file('unifidokey-upload-key.jks')
            storePassword System.getenv('KEYSTORE_PASS') ?: project.findProperty("unifidokey.keystorePass")
            keyAlias System.getenv('KEY_ALIAS') ?: project.findProperty("unifidokey.keyAlias")
            keyPassword System.getenv('KEY_PASS') ?: project.findProperty("unifidokey.keyPass")
        }
    }
    buildFeatures {
        dataBinding = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions 'distribution'
    productFlavors {
        oss {
            dimension 'distribution'

            applicationId 'com.unifidokey.oss'
            PropertyUtil.load(project, "src/oss/unifidokey.properties")
            buildConfigField "String", "ANDROID_SAFETY_NET_API_KEY", "${project.property("unifidokey.androidSafetyNetApiKey")}"
            getIsDefault().set(true)
        }
        playstore {
            dimension 'distribution'

            applicationId 'com.unifidokey'
            PropertyUtil.load(project, "src/playstore/unifidokey.properties")
            buildConfigField "String", "ANDROID_SAFETY_NET_API_KEY", "${project.property("unifidokey.androidSafetyNetApiKey")}"
            if (rootProject.file('unifidokey-upload-key.jks').exists()) {
                signingConfig signingConfigs.playstore
            }
        }
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
    packagingOptions {
        exclude 'README.txt'
    }
    lintOptions {
        lintConfig file('lint.xml')
    }
}

// Disable Google Services Gradle Plugin on oss flavor not to enable Firebase backed features
android.applicationVariants.all { variant ->
    if (variant.productFlavors.name.contains('oss')) {
        project.tasks.getByName('process' + variant.name.capitalize() + 'GoogleServices').enabled = false
    }
}

task publishAppBundle(type: PublishAppBundleTask){
    applicationName = "UnifidoKey"
    packageName = "com.unifidokey"
    appBundle = "${buildDir}/outputs/bundle/playstoreRelease/unifidokey-handheld-playstore-release.aab"
}

dependencies {


    // Kotlin
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8'

    // Project dependencies
    implementation project(':unifidokey-core')
    implementation project(':webauthn4j-ctap')

    // Third Party dependencies
    implementation 'com.github.tony19:logback-android'
    implementation 'org.slf4j:slf4j-api'
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor'

    // Android dependencies
    implementation 'androidx.room:room-runtime'

    // Play services
    implementation 'com.google.android.gms:play-services-oss-licenses'
    implementation 'com.google.android.gms:play-services-fido'

    // AndroidX
    implementation 'androidx.appcompat:appcompat'
    implementation 'androidx.constraintlayout:constraintlayout'
    implementation 'androidx.biometric:biometric'
    implementation 'androidx.legacy:legacy-support-v4'
    implementation 'androidx.preference:preference'
    implementation 'androidx.lifecycle:lifecycle-extensions'
    implementation 'androidx.recyclerview:recyclerview'
    implementation 'androidx.navigation:navigation-fragment'
    implementation 'androidx.navigation:navigation-ui'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx'

    implementation 'com.google.android.material:material'

    implementation 'com.google.dagger:dagger'
    implementation 'com.google.dagger:dagger-android'
    implementation 'com.google.dagger:dagger-android-support'

    //Firebase
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-analytics'


    // Annotation processor
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"
    kapt "androidx.room:room-compiler:$roomVersion"

    // test dependencies
    testImplementation 'junit:junit'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'androidx.test:core'
    testImplementation 'androidx.test.ext:junit'
    testImplementation 'com.google.truth:truth'
    testImplementation 'com.google.truth.extensions:truth-java8-extension'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test'
    testImplementation 'org.robolectric:robolectric'

    kaptTest "com.google.dagger:dagger-compiler:$daggerVersion"
    kaptTest "androidx.room:room-compiler:$roomVersion"

    // Android test dependencies
    androidTestImplementation 'androidx.test:core'
    androidTestImplementation 'androidx.test:runner'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'com.google.truth:truth'
    androidTestImplementation 'com.google.truth.extensions:truth-java8-extension:1.1.3'
    androidTestImplementation 'com.android.support:support-annotations'

}

sonarqube {
    skipProject = true
}
